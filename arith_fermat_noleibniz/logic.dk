eq :
  sttfa.etap (sttfa.forallK (A:sttfa.type => sttfa.p (sttfa.arrow A (sttfa.arrow A sttfa.bool)))).

refl :
  sttfa.eps (sttfa.forallP (A:sttfa.type => sttfa.forall A (x:(sttfa.etap (sttfa.p A)) => eq A x x))).

eq_ind :
  sttfa.eps
    (sttfa.forallP
       (A:sttfa.type =>
        sttfa.forall
          A
          (x:(sttfa.etap (sttfa.p A)) =>
           sttfa.forall
             (sttfa.arrow A sttfa.bool)
             (P:(sttfa.etap (sttfa.p (sttfa.arrow A sttfa.bool))) =>
              sttfa.impl
                (P x)
                (sttfa.forall A (y:(sttfa.etap (sttfa.p A)) => sttfa.impl (eq A x y) (P y))))))).

def eq_rect_r :
  sttfa.eps
    (sttfa.forallP
       (A:sttfa.type =>
        sttfa.forall
          A
          (a:(sttfa.etap (sttfa.p A)) =>
           sttfa.forall
             A
             (x:(sttfa.etap (sttfa.p A)) =>
              sttfa.impl
                (eq A x a)
                (sttfa.forall
                   (sttfa.arrow A sttfa.bool)
                   (P:(sttfa.etap (sttfa.p (sttfa.arrow A sttfa.bool))) =>
                    sttfa.impl (P a) (P x)))))))
  :=
  A:sttfa.type =>
  a:(sttfa.etap (sttfa.p A)) =>
  x:(sttfa.etap (sttfa.p A)) =>
  p:(sttfa.eps (eq A x a)) =>
  eq_ind
    A
    x
    (__:(sttfa.etap (sttfa.p A)) =>
     sttfa.forall
       (sttfa.arrow A sttfa.bool)
       (P:(sttfa.etap (sttfa.p (sttfa.arrow A sttfa.bool))) => sttfa.impl (P __) (P x)))
    (P:(sttfa.etap (sttfa.p (sttfa.arrow A sttfa.bool))) => auto:(sttfa.eps (P x)) => auto)
    a
    p.

def eq_ind_r :
  sttfa.eps
    (sttfa.forallP
       (A:sttfa.type =>
        sttfa.forall
          A
          (a:(sttfa.etap (sttfa.p A)) =>
           sttfa.forall
             (sttfa.arrow A sttfa.bool)
             (P:(sttfa.etap (sttfa.p (sttfa.arrow A sttfa.bool))) =>
              sttfa.impl
                (P a)
                (sttfa.forall A (x:(sttfa.etap (sttfa.p A)) => sttfa.impl (eq A x a) (P x)))))))
  :=
  A:sttfa.type =>
  a:(sttfa.etap (sttfa.p A)) =>
  P:(sttfa.etap (sttfa.p (sttfa.arrow A sttfa.bool))) =>
  p:(sttfa.eps (P a)) =>
  x0:(sttfa.etap (sttfa.p A)) =>
  p0:(sttfa.eps (eq A x0 a)) => eq_rect_r A a x0 p0 (x01:(sttfa.etap (sttfa.p A)) => P x01) p.

def rewrite_l :
  sttfa.eps
    (sttfa.forallP
       (A:sttfa.type =>
        sttfa.forall
          A
          (x:(sttfa.etap (sttfa.p A)) =>
           sttfa.forall
             (sttfa.arrow A sttfa.bool)
             (P:(sttfa.etap (sttfa.p (sttfa.arrow A sttfa.bool))) =>
              sttfa.impl
                (P x)
                (sttfa.forall A (y:(sttfa.etap (sttfa.p A)) => sttfa.impl (eq A x y) (P y)))))))
  :=
  A:sttfa.type =>
  x:(sttfa.etap (sttfa.p A)) =>
  P:(sttfa.etap (sttfa.p (sttfa.arrow A sttfa.bool))) =>
  Hx:(sttfa.eps (P x)) =>
  y:(sttfa.etap (sttfa.p A)) =>
  Heq:(sttfa.eps (eq A x y)) => eq_ind A x (__:(sttfa.etap (sttfa.p A)) => P __) Hx y Heq.

def sym_eq :
  sttfa.eps
    (sttfa.forallP
       (A:sttfa.type =>
        sttfa.forall
          A
          (x:(sttfa.etap (sttfa.p A)) =>
           sttfa.forall A (y:(sttfa.etap (sttfa.p A)) => sttfa.impl (eq A x y) (eq A y x)))))
  :=
  A:sttfa.type =>
  x:(sttfa.etap (sttfa.p A)) =>
  y:(sttfa.etap (sttfa.p A)) =>
  Heq:(sttfa.eps (eq A x y)) =>
  rewrite_l
    A
    x
    (__:(sttfa.etap (sttfa.p A)) => eq A __ x)
    (refl A x)
    y
    (rewrite_l A x (__:(sttfa.etap (sttfa.p A)) => eq A x __) (refl A x) y Heq).

def rewrite_r :
  sttfa.eps
    (sttfa.forallP
       (A:sttfa.type =>
        sttfa.forall
          A
          (x:(sttfa.etap (sttfa.p A)) =>
           sttfa.forall
             (sttfa.arrow A sttfa.bool)
             (P:(sttfa.etap (sttfa.p (sttfa.arrow A sttfa.bool))) =>
              sttfa.impl
                (P x)
                (sttfa.forall A (y:(sttfa.etap (sttfa.p A)) => sttfa.impl (eq A y x) (P y)))))))
  :=
  A:sttfa.type =>
  x:(sttfa.etap (sttfa.p A)) =>
  P:(sttfa.etap (sttfa.p (sttfa.arrow A sttfa.bool))) =>
  Hx:(sttfa.eps (P x)) =>
  y:(sttfa.etap (sttfa.p A)) =>
  Heq:(sttfa.eps (eq A y x)) =>
  eq_ind A x (__:(sttfa.etap (sttfa.p A)) => P __) Hx y (sym_eq A y x Heq).

def eq_coerc :
  sttfa.eps
    (sttfa.forall
       sttfa.bool
       (A:(sttfa.etap (sttfa.p sttfa.bool)) =>
        sttfa.forall
          sttfa.bool
          (B:(sttfa.etap (sttfa.p sttfa.bool)) => sttfa.impl A (sttfa.impl (eq sttfa.bool A B) B))))
  :=
  A:(sttfa.etap (sttfa.p sttfa.bool)) =>
  B:(sttfa.etap (sttfa.p sttfa.bool)) =>
  Ha:(sttfa.eps A) =>
  Heq:(sttfa.eps (eq sttfa.bool A B)) =>
  eq_ind sttfa.bool A (x_19:(sttfa.etap (sttfa.p sttfa.bool)) => x_19) Ha B Heq.

def trans_eq :
  sttfa.eps
    (sttfa.forallP
       (A:sttfa.type =>
        sttfa.forall
          A
          (x:(sttfa.etap (sttfa.p A)) =>
           sttfa.forall
             A
             (y:(sttfa.etap (sttfa.p A)) =>
              sttfa.forall
                A
                (z:(sttfa.etap (sttfa.p A)) =>
                 sttfa.impl (eq A x y) (sttfa.impl (eq A y z) (eq A x z)))))))
  :=
  A:sttfa.type =>
  x:(sttfa.etap (sttfa.p A)) =>
  y:(sttfa.etap (sttfa.p A)) =>
  z:(sttfa.etap (sttfa.p A)) =>
  H1:(sttfa.eps (eq A x y)) =>
  H2:(sttfa.eps (eq A y z)) =>
  eq_ind_r
    A
    y
    (x0:(sttfa.etap (sttfa.p A)) => eq A x0 z)
    (rewrite_l
       A
       x
       (__:(sttfa.etap (sttfa.p A)) => eq A __ z)
       (rewrite_l
          A
          x
          (__:(sttfa.etap (sttfa.p A)) => eq A x __)
          (refl A x)
          z
          (rewrite_r A y (__:(sttfa.etap (sttfa.p A)) => eq A __ z) H2 x H1))
       y
       H1)
    x
    H1.

def eq_f :
  sttfa.eps
    (sttfa.forallP
       (A:sttfa.type =>
        sttfa.forallP
          (B:sttfa.type =>
           sttfa.forall
             (sttfa.arrow A B)
             (f:(sttfa.etap (sttfa.p (sttfa.arrow A B))) =>
              sttfa.forall
                A
                (x:(sttfa.etap (sttfa.p A)) =>
                 sttfa.forall
                   A
                   (y:(sttfa.etap (sttfa.p A)) => sttfa.impl (eq A x y) (eq B (f x) (f y))))))))
  :=
  A:sttfa.type =>
  B:sttfa.type =>
  f:(sttfa.etap (sttfa.p (sttfa.arrow A B))) =>
  x:(sttfa.etap (sttfa.p A)) =>
  y:(sttfa.etap (sttfa.p A)) =>
  H:(sttfa.eps (eq A x y)) =>
  eq_ind_r
    A
    y
    (x0:(sttfa.etap (sttfa.p A)) => eq B (f x0) (f y))
    (rewrite_l
       A
       x
       (__:(sttfa.etap (sttfa.p A)) => eq B (f __) (f y))
       (rewrite_l A x (__:(sttfa.etap (sttfa.p A)) => eq B (f x) (f __)) (refl B (f x)) y H)
       y
       H)
    x
    H.

def eq_f2 :
  sttfa.eps
    (sttfa.forallP
       (A:sttfa.type =>
        sttfa.forallP
          (B:sttfa.type =>
           sttfa.forallP
             (C:sttfa.type =>
              sttfa.forall
                (sttfa.arrow A (sttfa.arrow B C))
                (f:(sttfa.etap (sttfa.p (sttfa.arrow A (sttfa.arrow B C)))) =>
                 sttfa.forall
                   A
                   (x1:(sttfa.etap (sttfa.p A)) =>
                    sttfa.forall
                      A
                      (x2:(sttfa.etap (sttfa.p A)) =>
                       sttfa.forall
                         B
                         (y1:(sttfa.etap (sttfa.p B)) =>
                          sttfa.forall
                            B
                            (y2:(sttfa.etap (sttfa.p B)) =>
                             sttfa.impl
                               (eq A x1 x2)
                               (sttfa.impl (eq B y1 y2) (eq C (f x1 y1) (f x2 y2))))))))))))
  :=
  A:sttfa.type =>
  B:sttfa.type =>
  C:sttfa.type =>
  f:(sttfa.etap (sttfa.p (sttfa.arrow A (sttfa.arrow B C)))) =>
  x1:(sttfa.etap (sttfa.p A)) =>
  x2:(sttfa.etap (sttfa.p A)) =>
  y1:(sttfa.etap (sttfa.p B)) =>
  y2:(sttfa.etap (sttfa.p B)) =>
  E1:(sttfa.eps (eq A x1 x2)) =>
  E2:(sttfa.eps (eq B y1 y2)) =>
  eq_ind_r
    A
    x2
    (x:(sttfa.etap (sttfa.p A)) => eq C (f x y1) (f x2 y2))
    (eq_ind_r
       B
       y2
       (x:(sttfa.etap (sttfa.p B)) => eq C (f x2 x) (f x2 y2))
       (rewrite_l
          A
          x1
          (__:(sttfa.etap (sttfa.p A)) => eq C (f __ y2) (f x2 y2))
          (rewrite_l
             B
             y1
             (__:(sttfa.etap (sttfa.p B)) => eq C (f x1 __) (f x2 y2))
             (rewrite_l
                A
                x1
                (__:(sttfa.etap (sttfa.p A)) => eq C (f x1 y1) (f __ y2))
                (rewrite_l
                   B
                   y1
                   (__:(sttfa.etap (sttfa.p B)) => eq C (f x1 y1) (f x1 __))
                   (refl C (f x1 y1))
                   y2
                   E2)
                x2
                E1)
             y2
             E2)
          x2
          E1)
       y1
       E2)
    x1
    E1.

def absurd :
  sttfa.eps
    (sttfa.forall
       sttfa.bool
       (A:(sttfa.etap (sttfa.p sttfa.bool)) =>
        sttfa.impl A (sttfa.impl (connectives.Not A) connectives.False)))
  :=
  A:(sttfa.etap (sttfa.p sttfa.bool)) =>
  H:(sttfa.eps A) =>
  Hn:(sttfa.eps (connectives.Not A)) =>
  connectives.Not_ind
    A
    connectives.False
    (_x_80:(sttfa.eps (sttfa.impl A connectives.False)) => _x_80 H)
    Hn.

def not_to_not :
  sttfa.eps
    (sttfa.forall
       sttfa.bool
       (A:(sttfa.etap (sttfa.p sttfa.bool)) =>
        sttfa.forall
          sttfa.bool
          (B:(sttfa.etap (sttfa.p sttfa.bool)) =>
           sttfa.impl (sttfa.impl A B) (sttfa.impl (connectives.Not B) (connectives.Not A)))))
  :=
  A:(sttfa.etap (sttfa.p sttfa.bool)) =>
  B:(sttfa.etap (sttfa.p sttfa.bool)) =>
  auto:(sttfa.eps (sttfa.impl A B)) =>
  auto':(sttfa.eps (connectives.Not B)) =>
  connectives.nmk A (auto'':(sttfa.eps A) => absurd B (auto auto'') auto').

def sym_not_eq :
  sttfa.eps
    (sttfa.forallP
       (A:sttfa.type =>
        sttfa.forall
          A
          (x:(sttfa.etap (sttfa.p A)) =>
           sttfa.forall
             A
             (y:(sttfa.etap (sttfa.p A)) =>
              sttfa.impl (connectives.Not (eq A x y)) (connectives.Not (eq A y x))))))
  :=
  A:sttfa.type =>
  x:(sttfa.etap (sttfa.p A)) =>
  y:(sttfa.etap (sttfa.p A)) =>
  auto:(sttfa.eps (connectives.Not (eq A x y))) =>
  connectives.nmk
    (eq A y x)
    (auto':(sttfa.eps (eq A y x)) =>
     absurd
       (eq A x y)
       (rewrite_r A x (__:(sttfa.etap (sttfa.p A)) => eq A x __) (refl A x) y auto')
       auto).

def proj1 :
  sttfa.eps
    (sttfa.forall
       sttfa.bool
       (A:(sttfa.etap (sttfa.p sttfa.bool)) =>
        sttfa.forall
          sttfa.bool
          (B:(sttfa.etap (sttfa.p sttfa.bool)) => sttfa.impl (connectives.And A B) A)))
  :=
  A:(sttfa.etap (sttfa.p sttfa.bool)) =>
  B:(sttfa.etap (sttfa.p sttfa.bool)) =>
  AB:(sttfa.eps (connectives.And A B)) =>
  connectives.match_And_prop A B A (_x_120:(sttfa.eps A) => _x_119:(sttfa.eps B) => _x_120) AB.

def proj2 :
  sttfa.eps
    (sttfa.forall
       sttfa.bool
       (A:(sttfa.etap (sttfa.p sttfa.bool)) =>
        sttfa.forall
          sttfa.bool
          (B:(sttfa.etap (sttfa.p sttfa.bool)) => sttfa.impl (connectives.And A B) B)))
  :=
  A:(sttfa.etap (sttfa.p sttfa.bool)) =>
  B:(sttfa.etap (sttfa.p sttfa.bool)) =>
  AB:(sttfa.eps (connectives.And A B)) =>
  connectives.match_And_prop A B B (_x_120:(sttfa.eps A) => _x_119:(sttfa.eps B) => _x_119) AB.

def decidable :
  sttfa.etap (sttfa.p (sttfa.arrow sttfa.bool sttfa.bool))
  :=
  A:(sttfa.etap (sttfa.p sttfa.bool)) => connectives.Or A (connectives.Not A).

