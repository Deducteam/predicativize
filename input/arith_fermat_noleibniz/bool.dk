bool : sttfa.type.

true : sttfa.etap (sttfa.p bool).

false : sttfa.etap (sttfa.p bool).

match_bool_prop :
  sttfa.eps
    (sttfa.forall
       (sttfa.arrow bool sttfa.bool)
       (return:(sttfa.etap (sttfa.p (sttfa.arrow bool sttfa.bool))) =>
        sttfa.impl
          (return true)
          (sttfa.impl
             (return false)
             (sttfa.forall bool (z:(sttfa.etap (sttfa.p bool)) => return z))))).

match_bool_type :
  sttfa.etap
    (sttfa.forallK
       (return:sttfa.type =>
        sttfa.p (sttfa.arrow return (sttfa.arrow return (sttfa.arrow bool return))))).

axiom_match_bool_type_true :
  sttfa.eps
    (sttfa.forallP
       (return:sttfa.type =>
        sttfa.forall
          return
          (case_true:(sttfa.etap (sttfa.p return)) =>
           sttfa.forall
             return
             (case_false:(sttfa.etap (sttfa.p return)) =>
              connectives.equal
                return
                (match_bool_type return case_true case_false true)
                case_true)))).

def eq_match_bool_type_true :
  sttfa.eps
    (sttfa.forallP
       (return:sttfa.type =>
        sttfa.forall
          return
          (case_true:(sttfa.etap (sttfa.p return)) =>
           sttfa.forall
             return
             (case_false:(sttfa.etap (sttfa.p return)) =>
              sttfa.forall
                (sttfa.arrow return sttfa.bool)
                (P:(sttfa.eta (sttfa.arrow return sttfa.bool)) =>
                 sttfa.impl (P (match_bool_type return case_true case_false true)) (P case_true))))))
  :=
  return:sttfa.type =>
  case_true:(sttfa.etap (sttfa.p return)) =>
  case_false:(sttfa.etap (sttfa.p return)) =>
  connectives.equal_leibniz
    return
    (match_bool_type return case_true case_false true)
    case_true
    (axiom_match_bool_type_true return case_true case_false).

axiom_match_bool_type_false :
  sttfa.eps
    (sttfa.forallP
       (return:sttfa.type =>
        sttfa.forall
          return
          (case_true:(sttfa.etap (sttfa.p return)) =>
           sttfa.forall
             return
             (case_false:(sttfa.etap (sttfa.p return)) =>
              connectives.equal
                return
                (match_bool_type return case_true case_false false)
                case_false)))).

def eq_match_bool_type_false :
  sttfa.eps
    (sttfa.forallP
       (return:sttfa.type =>
        sttfa.forall
          return
          (case_true:(sttfa.etap (sttfa.p return)) =>
           sttfa.forall
             return
             (case_false:(sttfa.etap (sttfa.p return)) =>
              sttfa.forall
                (sttfa.arrow return sttfa.bool)
                (P:(sttfa.eta (sttfa.arrow return sttfa.bool)) =>
                 sttfa.impl
                   (P (match_bool_type return case_true case_false false))
                   (P case_false))))))
  :=
  return:sttfa.type =>
  case_true:(sttfa.etap (sttfa.p return)) =>
  case_false:(sttfa.etap (sttfa.p return)) =>
  connectives.equal_leibniz
    return
    (match_bool_type return case_true case_false false)
    case_false
    (axiom_match_bool_type_false return case_true case_false).

def sym_eq_match_bool_type_true :
  sttfa.eps
    (sttfa.forallP
       (return:sttfa.type =>
        sttfa.forall
          return
          (case_true:(sttfa.etap (sttfa.p return)) =>
           sttfa.forall
             return
             (case_false:(sttfa.etap (sttfa.p return)) =>
              sttfa.forall
                (sttfa.arrow return sttfa.bool)
                (P:(sttfa.eta (sttfa.arrow return sttfa.bool)) =>
                 sttfa.impl (P case_true) (P (match_bool_type return case_true case_false true)))))))
  :=
  return:sttfa.type =>
  case_true:(sttfa.etap (sttfa.p return)) =>
  case_false:(sttfa.etap (sttfa.p return)) =>
  leibniz.sym_leibniz
    return
    (match_bool_type return case_true case_false true)
    case_true
    (eq_match_bool_type_true return case_true case_false).

def sym_eq_match_bool_type_false :
  sttfa.eps
    (sttfa.forallP
       (return:sttfa.type =>
        sttfa.forall
          return
          (case_true:(sttfa.etap (sttfa.p return)) =>
           sttfa.forall
             return
             (case_false:(sttfa.etap (sttfa.p return)) =>
              sttfa.forall
                (sttfa.arrow return sttfa.bool)
                (P:(sttfa.eta (sttfa.arrow return sttfa.bool)) =>
                 sttfa.impl
                   (P case_false)
                   (P (match_bool_type return case_true case_false false)))))))
  :=
  return:sttfa.type =>
  case_true:(sttfa.etap (sttfa.p return)) =>
  case_false:(sttfa.etap (sttfa.p return)) =>
  leibniz.sym_leibniz
    return
    (match_bool_type return case_true case_false false)
    case_false
    (eq_match_bool_type_false return case_true case_false).

def bool_discr :
  sttfa.eps
    (sttfa.forall
       bool
       (x:(sttfa.etap (sttfa.p bool)) =>
        sttfa.forall
          bool
          (y:(sttfa.etap (sttfa.p bool)) =>
           sttfa.impl
             (logic.eq bool x y)
             (match_bool_type
                sttfa.bool
                (match_bool_type
                   sttfa.bool
                   (sttfa.forall
                      sttfa.bool
                      (P:(sttfa.etap (sttfa.p sttfa.bool)) => sttfa.impl P P))
                   (sttfa.forall sttfa.bool (P:(sttfa.etap (sttfa.p sttfa.bool)) => P))
                   y)
                (match_bool_type
                   sttfa.bool
                   (sttfa.forall sttfa.bool (P:(sttfa.etap (sttfa.p sttfa.bool)) => P))
                   (sttfa.forall
                      sttfa.bool
                      (P:(sttfa.etap (sttfa.p sttfa.bool)) => sttfa.impl P P))
                   y)
                x))))
  :=
  x:(sttfa.etap (sttfa.p bool)) =>
  y:(sttfa.etap (sttfa.p bool)) =>
  Deq:(sttfa.eps (logic.eq bool x y)) =>
  logic.eq_ind
    bool
    x
    (x_13:(sttfa.etap (sttfa.p bool)) =>
     match_bool_type
       sttfa.bool
       (match_bool_type
          sttfa.bool
          (sttfa.forall sttfa.bool (P:(sttfa.etap (sttfa.p sttfa.bool)) => sttfa.impl P P))
          (sttfa.forall sttfa.bool (P:(sttfa.etap (sttfa.p sttfa.bool)) => P))
          x_13)
       (match_bool_type
          sttfa.bool
          (sttfa.forall sttfa.bool (P:(sttfa.etap (sttfa.p sttfa.bool)) => P))
          (sttfa.forall sttfa.bool (P:(sttfa.etap (sttfa.p sttfa.bool)) => sttfa.impl P P))
          x_13)
       x)
    (match_bool_prop
       (__:(sttfa.etap (sttfa.p bool)) =>
        match_bool_type
          sttfa.bool
          (match_bool_type
             sttfa.bool
             (sttfa.forall sttfa.bool (P:(sttfa.etap (sttfa.p sttfa.bool)) => sttfa.impl P P))
             (sttfa.forall sttfa.bool (P:(sttfa.etap (sttfa.p sttfa.bool)) => P))
             __)
          (match_bool_type
             sttfa.bool
             (sttfa.forall sttfa.bool (P:(sttfa.etap (sttfa.p sttfa.bool)) => P))
             (sttfa.forall sttfa.bool (P:(sttfa.etap (sttfa.p sttfa.bool)) => sttfa.impl P P))
             __)
          __)
       (sym_eq_match_bool_type_true
          sttfa.bool
          (match_bool_type
             sttfa.bool
             (sttfa.forall sttfa.bool (P:(sttfa.etap (sttfa.p sttfa.bool)) => sttfa.impl P P))
             (sttfa.forall sttfa.bool (P:(sttfa.etap (sttfa.p sttfa.bool)) => P))
             true)
          (match_bool_type
             sttfa.bool
             (sttfa.forall sttfa.bool (P:(sttfa.etap (sttfa.p sttfa.bool)) => P))
             (sttfa.forall sttfa.bool (P:(sttfa.etap (sttfa.p sttfa.bool)) => sttfa.impl P P))
             true)
          (x0:(sttfa.etap (sttfa.p sttfa.bool)) => x0)
          (sym_eq_match_bool_type_true
             sttfa.bool
             (sttfa.forall sttfa.bool (P:(sttfa.etap (sttfa.p sttfa.bool)) => sttfa.impl P P))
             (sttfa.forall sttfa.bool (P:(sttfa.etap (sttfa.p sttfa.bool)) => P))
             (x0:(sttfa.etap (sttfa.p sttfa.bool)) => x0)
             (P:(sttfa.etap (sttfa.p sttfa.bool)) => DH:(sttfa.eps P) => DH)))
       (sym_eq_match_bool_type_false
          sttfa.bool
          (match_bool_type
             sttfa.bool
             (sttfa.forall sttfa.bool (P:(sttfa.etap (sttfa.p sttfa.bool)) => sttfa.impl P P))
             (sttfa.forall sttfa.bool (P:(sttfa.etap (sttfa.p sttfa.bool)) => P))
             false)
          (match_bool_type
             sttfa.bool
             (sttfa.forall sttfa.bool (P:(sttfa.etap (sttfa.p sttfa.bool)) => P))
             (sttfa.forall sttfa.bool (P:(sttfa.etap (sttfa.p sttfa.bool)) => sttfa.impl P P))
             false)
          (x0:(sttfa.etap (sttfa.p sttfa.bool)) => x0)
          (sym_eq_match_bool_type_false
             sttfa.bool
             (sttfa.forall sttfa.bool (P:(sttfa.etap (sttfa.p sttfa.bool)) => P))
             (sttfa.forall sttfa.bool (P:(sttfa.etap (sttfa.p sttfa.bool)) => sttfa.impl P P))
             (x0:(sttfa.etap (sttfa.p sttfa.bool)) => x0)
             (P:(sttfa.etap (sttfa.p sttfa.bool)) => DH:(sttfa.eps P) => DH)))
       x)
    y
    Deq.

def not_eq_true_false :
  sttfa.eps (connectives.Not (logic.eq bool true false))
  :=
  connectives.nmk
    (logic.eq bool true false)
    (Heq:(sttfa.eps (logic.eq bool true false)) =>
     eq_match_bool_type_false
       sttfa.bool
       (sttfa.forall sttfa.bool (P:(sttfa.etap (sttfa.p sttfa.bool)) => sttfa.impl P P))
       (sttfa.forall sttfa.bool (P:(sttfa.etap (sttfa.p sttfa.bool)) => P))
       (x:(sttfa.etap (sttfa.p sttfa.bool)) => x)
       (eq_match_bool_type_true
          sttfa.bool
          (match_bool_type
             sttfa.bool
             (sttfa.forall sttfa.bool (P:(sttfa.etap (sttfa.p sttfa.bool)) => sttfa.impl P P))
             (sttfa.forall sttfa.bool (P:(sttfa.etap (sttfa.p sttfa.bool)) => P))
             false)
          (match_bool_type
             sttfa.bool
             (sttfa.forall sttfa.bool (P:(sttfa.etap (sttfa.p sttfa.bool)) => P))
             (sttfa.forall sttfa.bool (P:(sttfa.etap (sttfa.p sttfa.bool)) => sttfa.impl P P))
             false)
          (x:(sttfa.etap (sttfa.p sttfa.bool)) => x)
          (bool_discr true false Heq))
       connectives.False).

def notb :
  sttfa.etap (sttfa.p (sttfa.arrow bool bool))
  :=
  b:(sttfa.etap (sttfa.p bool)) => match_bool_type bool false true b.

def andb :
  sttfa.etap (sttfa.p (sttfa.arrow bool (sttfa.arrow bool bool)))
  :=
  b1:(sttfa.etap (sttfa.p bool)) => b2:(sttfa.etap (sttfa.p bool)) => match_bool_type bool b2 false b1.

def andb_true_l :
  sttfa.eps
    (sttfa.forall
       bool
       (b1:(sttfa.etap (sttfa.p bool)) =>
        sttfa.forall
          bool
          (b2:(sttfa.etap (sttfa.p bool)) =>
           sttfa.impl (logic.eq bool (andb b1 b2) true) (logic.eq bool b1 true))))
  :=
  b1:(sttfa.etap (sttfa.p bool)) =>
  match_bool_prop
    (__:(sttfa.etap (sttfa.p bool)) =>
     sttfa.forall
       bool
       (b2:(sttfa.etap (sttfa.p bool)) =>
        sttfa.impl (logic.eq bool (andb __ b2) true) (logic.eq bool __ true)))
    (b2:(sttfa.etap (sttfa.p bool)) =>
     sym_eq_match_bool_type_true
       bool
       b2
       false
       (x:(sttfa.etap (sttfa.p bool)) => sttfa.impl (logic.eq bool x true) (logic.eq bool true true))
       (auto:(sttfa.eps (logic.eq bool b2 true)) =>
        logic.rewrite_l
          bool
          b2
          (__:(sttfa.etap (sttfa.p bool)) => logic.eq bool __ true)
          (logic.rewrite_l
             bool
             b2
             (__:(sttfa.etap (sttfa.p bool)) => logic.eq bool b2 __)
             (logic.refl bool b2)
             true
             auto)
          true
          auto))
    (_b2:(sttfa.etap (sttfa.p bool)) =>
     sym_eq_match_bool_type_false
       bool
       _b2
       false
       (x:(sttfa.etap (sttfa.p bool)) =>
        sttfa.impl (logic.eq bool x true) (logic.eq bool false true))
       (auto:(sttfa.eps (logic.eq bool false true)) =>
        logic.rewrite_r
          bool
          true
          (__:(sttfa.etap (sttfa.p bool)) => logic.eq bool __ true)
          (logic.refl bool true)
          false
          auto))
    b1.

def andb_true_r :
  sttfa.eps
    (sttfa.forall
       bool
       (b1:(sttfa.etap (sttfa.p bool)) =>
        sttfa.forall
          bool
          (b2:(sttfa.etap (sttfa.p bool)) =>
           sttfa.impl (logic.eq bool (andb b1 b2) true) (logic.eq bool b2 true))))
  :=
  b1:(sttfa.etap (sttfa.p bool)) =>
  b2:(sttfa.etap (sttfa.p bool)) =>
  match_bool_prop
    (__:(sttfa.etap (sttfa.p bool)) =>
     sttfa.impl (logic.eq bool (andb __ b2) true) (logic.eq bool b2 true))
    (sym_eq_match_bool_type_true
       bool
       b2
       false
       (x:(sttfa.etap (sttfa.p bool)) => sttfa.impl (logic.eq bool x true) (logic.eq bool b2 true))
       (auto:(sttfa.eps (logic.eq bool b2 true)) =>
        logic.rewrite_l
          bool
          b2
          (__:(sttfa.etap (sttfa.p bool)) => logic.eq bool b2 __)
          (logic.refl bool b2)
          true
          auto))
    (sym_eq_match_bool_type_false
       bool
       b2
       false
       (x:(sttfa.etap (sttfa.p bool)) => sttfa.impl (logic.eq bool x true) (logic.eq bool b2 true))
       (match_bool_prop
          (__:(sttfa.etap (sttfa.p bool)) =>
           sttfa.impl (logic.eq bool false true) (logic.eq bool __ true))
          (auto:(sttfa.eps (logic.eq bool false true)) => logic.refl bool true)
          (auto:(sttfa.eps (logic.eq bool false true)) =>
           logic.rewrite_r
             bool
             true
             (__:(sttfa.etap (sttfa.p bool)) => logic.eq bool __ true)
             (logic.refl bool true)
             false
             auto)
          b2))
    b1.

def true_or_false :
  sttfa.eps
    (sttfa.forall
       bool
       (b:(sttfa.etap (sttfa.p bool)) =>
        connectives.Or (logic.eq bool b true) (logic.eq bool b false)))
  :=
  b:(sttfa.etap (sttfa.p bool)) =>
  match_bool_prop
    (__:(sttfa.etap (sttfa.p bool)) =>
     connectives.Or (logic.eq bool __ true) (logic.eq bool __ false))
    (connectives.or_introl
       (logic.eq bool true true)
       (logic.eq bool true false)
       (logic.refl bool true))
    (relations.RC_reflexive
       bool
       (__:(sttfa.etap (sttfa.p bool)) => _0:(sttfa.etap (sttfa.p bool)) => logic.eq bool false true)
       false)
    b.

