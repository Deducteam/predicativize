def leibniz :
  sttfa.etap (sttfa.forallK (A:sttfa.type => sttfa.p (sttfa.arrow A (sttfa.arrow A sttfa.bool))))
  :=
  A:sttfa.type =>
  x:(sttfa.eta A) =>
  y:(sttfa.eta A) =>
  sttfa.forall
    (sttfa.arrow A sttfa.bool)
    (P:(sttfa.eta (sttfa.arrow A sttfa.bool)) => sttfa.impl (P x) (P y)).

def refl_leibniz :
  sttfa.eps
    (sttfa.forallP
       (A:sttfa.type =>
        sttfa.forall
          A
          (x:(sttfa.eta A) =>
           sttfa.forall
             (sttfa.arrow A sttfa.bool)
             (P:(sttfa.eta (sttfa.arrow A sttfa.bool)) => sttfa.impl (P x) (P x)))))
  :=
  A:sttfa.type =>
  x:(sttfa.eta A) => P:(sttfa.eta (sttfa.arrow A sttfa.bool)) => H:(sttfa.eps (P x)) => H.

def sym_leibniz :
  sttfa.eps
    (sttfa.forallP
       (A:sttfa.type =>
        sttfa.forall
          A
          (x:(sttfa.eta A) =>
           sttfa.forall
             A
             (y:(sttfa.eta A) =>
              sttfa.impl
                (sttfa.forall
                   (sttfa.arrow A sttfa.bool)
                   (P:(sttfa.eta (sttfa.arrow A sttfa.bool)) => sttfa.impl (P x) (P y)))
                (sttfa.forall
                   (sttfa.arrow A sttfa.bool)
                   (P:(sttfa.eta (sttfa.arrow A sttfa.bool)) => sttfa.impl (P y) (P x)))))))
  :=
  A:sttfa.type =>
  x:(sttfa.eta A) =>
  y:(sttfa.eta A) =>
  p:(sttfa.eps
       (sttfa.forall
          (sttfa.arrow A sttfa.bool)
          (P:(sttfa.eta (sttfa.arrow A sttfa.bool)) => sttfa.impl (P x) (P y)))) =>
  P:(sttfa.eta (sttfa.arrow A sttfa.bool)) =>
  H:(sttfa.eps (P y)) => p (a:(sttfa.eta A) => sttfa.impl (P a) (P x)) (px:(sttfa.eps (P x)) => px) H.

