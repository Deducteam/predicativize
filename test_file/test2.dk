(; D : Set_2 = Set_1 ;)
def D : pts.El pts.var (pts.u pts.var) := (pts.u pts.var).
(; D : (i : L) -> Set (s i) = \i. Set i ;)

(; c : D = Set_0 -> Set_0 ;)
def c : pts.El pts.var D := pts.Prod pts.var pts.var (pts.u pts.var) (x => pts.u pts.var).
(; c : (i j : L) -> D (s (max i j)) = \i j. Set i -> Set j;)

(; eq : (A : Set_2) -> A -> A -> D -> D ;)
def eq : pts.El pts.var (pts.Prod pts.var pts.var (pts.u pts.var) (A => pts.Prod pts.var pts.var A (a => pts.Prod pts.var pts.var A (b => pts.Prod pts.var pts.var D (_ => D)))))
   := A => a => b => d => d.
(; eq : (i j : L) -> A : Set i -> A -> A -> D j -> D j = \i j A a b d. d ;)

(; F : D -> D = fun z : D => eq Set_2 c z ;)
def F : pts.El pts.var (pts.Prod pts.var pts.var D (y => D)) := z => eq (pts.u pts.var) c z (pts.u pts.var).
(; F : (i j k : L) -> D (s (max i j)) -> D (s k)  ;)

(; problem : Set_1 = F c ;)
def problem : pts.El pts.var (pts.u pts.var) := F c.
